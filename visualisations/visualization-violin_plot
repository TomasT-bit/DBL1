import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import StringIO
from neo4j import GraphDatabase


# Neo4j connection
uri = "bolt://localhost:7687"  
user = "neo4j"
password = "password"
driver = GraphDatabase.driver(uri, auth=(user, password), database="databasefinal")

def run_query(tx, query):
    return [record.data() for record in tx.run(query)]

#queries
Original_tweets = """
MATCH (t:Tweet)
WHERE t.Type = '1'
  AND t.sentiment_expected_value IS NOT NULL
RETURN  t.sentiment_expected_value AS sentiment_expected_value
"""
Retweets = """
MATCH (t:Tweet)
WHERE t.Type = '2'
  AND t.sentiment_expected_value IS NOT NULL
RETURN  t.sentiment_expected_value AS sentiment_expected_value
"""

Quoted_tweets = """
MATCH (t:Tweet)
WHERE t.Type = '3'
  AND t.sentiment_expected_value IS NOT NULL
RETURN  t.sentiment_expected_value AS sentiment_expected_value
"""

Replies = """
MATCH (t:Tweet)
WHERE t.Type = '4'
  AND t.sentiment_expected_value IS NOT NULL
RETURN  t.sentiment_expected_value AS sentiment_expected_value
"""
queries = {
    "Original": Original_tweets,
    "Retweet": Retweets,
    "Quote": Quoted_tweets,
    "Reply": Replies
}
dataframes = {}

with driver.session() as session:
    for name, query in queries.items():
        results = session.execute_read(run_query, query)
        df = pd.DataFrame(results)
        df["sentiment_expected_value"] = df["sentiment_expected_value"].astype(float)
        dataframes[name] = df

driver.close()

df_original = dataframes["Original"]
df_retweets  = dataframes["Retweet"]
df_quoted    = dataframes["Quote"]
df_replies    = dataframes["Reply"]

# Combine all datasets
combined = pd.concat([df_original, df_quoted, df_replies, df_retweets])

fig, axes = plt.subplots(2, 2, figsize=(14, 10))
fig.suptitle("Sentiment Distribution per Tweet Type", fontsize=16)

sns.violinplot(data=df_original, y="sentiment_expected_value", ax=axes[0, 0])
axes[0, 0].set_title("Original Tweets")

sns.violinplot(data=df_retweets, y="sentiment_expected_value", ax=axes[0, 1])
axes[0, 1].set_title("Retweets")

sns.violinplot(data=df_quoted, y="sentiment_expected_value", ax=axes[1, 0])
axes[1, 0].set_title("Quote Tweets")

sns.violinplot(data=df_replies, y="sentiment_expected_value", ax=axes[1, 1])
axes[1, 1].set_title("Replies")

# Clean up
for ax in axes.flatten():
    ax.set_ylabel("Sentiment Expected Value")
    ax.grid(True)

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()
